# emsfp-config-upload.yml
#
#   Le playbook sfp config upload vise à téléverser les configurations d'un module emsfp qui sont dans un fichier yaml vers le
#   module correspondant. Seule les configurations qui sont différentes seront envoyées à l'API du module pour modification.
#
# Utilisation
#
#   Le playbook peut être exécuté avec la commande suivante:
#     `ansible-playbook [nom du playbook] -i inventaire/[chemin du fichier d'inventaire] -l [machine ou groupe cible] -v`
#
# Configuration des routes de l'api qui sont lues sur les modules emsfp
#
#   Liste des routes de configuration régulière :
#     Pour encapsulateurs et décapsulateurs :
#       /emsfp/node/v1/self/ipconfig/
#       /emsfp/node/v1/refclk/
#
#   Liste des routes de configuration basées sur ID :
#     Appliquable à tous les types de module :
#       /emsfp/node/v1/flows/
#
#     Spécifique aux encapsulateurs :
#       /emsfp/node/v1/sdi_input/
#
#     Spécifique aux décapsulateurs :
#       /emsfp/node/v1/sdi_audio/
#       /emsfp/node/v1/sdi_output/
#
#   Liste des routes de configuration basées sur ID dans un paramètre spécifique:
#     /emsfp/node/v1/refclk/ sous le parametre UUID
#
# Source du fichier YAML
#
# Le fichier est pris dans le répertoire ./vars/ et la nomenclature recherchée est  "value_read_from_module_XXX.XXX.XXX.XXX". Les X réprésentent l'adresse IP du module.
#
# Copyright: (c) 2018, Société Radio-Canada>
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
#
---
- hosts: all
  gather_facts: no
  vars_files:
    - ../common_vars/all/all.yml
  vars:
    - ansible_python_interpreter: "{{ lookup('env','VIRTUAL_ENV') }}/bin/python"

  tasks:
    - name: Load emsfp module yaml file
      include_vars: "vars/values_read_from_module_{{ hostvars[inventory_hostname].ansible_host_ip }}.yml"
      delegate_to: localhost

    - name:
      emsfp_all_configs:
        ip_addr: "{{ hostvars[inventory_hostname].ansible_host_ip }}"
        mode: upload
        config: "{{ emsfp_module }}"
      delegate_to: localhost
