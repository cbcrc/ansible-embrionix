# Copyright: (c) 2018, Société Radio-Canada>
# GNU General Public License v3.0+ (see LICENSE or https://www.gnu.org/licenses/gpl-3.0.txt)
#
---
- name: Emsfp Staging
  block:
    - name: Parse CSV to YAML
      template:
        src: "templates/csv_to_yaml.j2"
        dest: "vars/EMSFP_data.yml"
      vars: 
        - csvfile: "{{ lookup('file', '{{ var_file }}') }}"
      run_once: true
      changed_when: no

    - include_vars: EMSFP_data.yml

    - name: Check Procedure for MAC Address or Ethernet Port
      check_procedure:
        variables: '{{ modules }}'
      register: procedure
  
    - name: Run the SMBUS command "show platform smbus counters" and register the output.
      eos_command:
        commands: 
          - enable
          - show platform smbus counters | sed '/Est. Tx/ q'
      register: smbusses

    - name: Filter smbus return to create a dict of corresponding Ethernet port and SMBUS Addresses.
      smbus_to_array:
        smbus: '{{ smbusses.stdout[1] }}'
      register: port_smbus_dict

    - name: Convert the network addresses expected from dec to hex.
      convert_network_address:
        ip_addr: "{{ item['ip_addr'] }}"
        subnet_mask: "{{ item['subnet_mask'] }}"
        gateway: "{{ item['gateway'] }}"
        convert_to: "hex"
      loop: "{{ modules }}"
      register : expected_hex_network_addresses

    - name: Read the MAC on all module in the switch via the smbus. Only for MAC Procedure.
      eos_command:
        commands:
          - enable
          - bash
          # Set the page 0x84 dans le registre 127 pour acceder a la MAC et au IP
          - smbus writes /scd/{{ item.value }} 127 0x84
          # Read 6 consecutive bytes from the register 133 (133-138) containing MAC address.
          - smbus reads /scd/{{ item.value }} 133 6
          - exit
      register: mac_reads_hex
      loop: "{{ port_smbus_dict.msg | dict2items }}"
      no_log: True
      when: procedure.msg == 'mac'

    - name: Create a SMBus table with corresponding MAC address. Only for MAC Procedure.
      set_fact:
        correspondance: "{{ correspondance|default([]) + [ {'smbus_address': mac_reads_hex.results[item|int].item.value, 'mac_address':  mac_reads_hex.results[item|int].stdout[3]} ] }}"
      loop: "{{ range(mac_reads_hex.results | length)|list }}"
      when: procedure.msg == 'mac'
      no_log: True

    - name: Create Payload for each module to configure with Hex values.
      emsfp_i2c_payload:
        port_number: "{{ modules[item|int].port_number | default([None]) }}"
        smbus_addresses: '{{ port_smbus_dict.msg | default(None) }}'
        mac_smbus_correspondance: "{{ correspondance | default([]) }}"
        mac_address: "{{ modules[item|int].mac_address | default(None) }}" 
        ip_addr: "{{ expected_hex_network_addresses.results[item|int].msg.converted_value.ip_addr }}"
        subnet_mask: "{{ expected_hex_network_addresses.results[item|int].msg.converted_value.subnet_mask }}"
        gateway: "{{ expected_hex_network_addresses.results[item|int].msg.converted_value.gateway }}"
      loop: "{{ range(modules | length)|list }}"
      register: emsfp_modules_network_configs
      
    - name: Set ip address via the smbus.
      eos_command:
        commands:
          - enable
          - bash
          # Set the page 0x84 dans le registre 127 pour acceder a la MAC et au IP
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 127 0x84
          # Set the register 129 to 0x02 to set to edit the registers 151-154
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x02
          # Set the IP value in register 151-154
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 151 0x{{ emsfp_modules_network_configs.results[item|int].msg.ip_first }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 152 0x{{ emsfp_modules_network_configs.results[item|int].msg.ip_second }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 153 0x{{ emsfp_modules_network_configs.results[item|int].msg.ip_third }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 154 0x{{ emsfp_modules_network_configs.results[item|int].msg.ip_fourth }}
          # Set the register 129 to 0x03 to write the changes done.
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x03
          # Set the register 129 to 0x00 to set to read only the registers 151-154
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x00
          - exit
      loop: "{{ range(emsfp_modules_network_configs.results | length)|list }}"
      when: not ansible_check_mode
      no_log: True

    - name: Set subnetmask via the smbus.
      eos_command:
        commands:
          - enable
          - bash
          # Set the page 0x84 dans le registre 127 pour acceder a la MAC et au IP
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 127 0x84
          # Set the register 129 to 0x02 to set to edit the registers 155-158
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x02
          # Set the IP value in register 155-158
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 155 0x{{ emsfp_modules_network_configs.results[item|int].msg.subnet_mask_first }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 156 0x{{ emsfp_modules_network_configs.results[item|int].msg.subnet_mask_second }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 157 0x{{ emsfp_modules_network_configs.results[item|int].msg.subnet_mask_third }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 158 0x{{ emsfp_modules_network_configs.results[item|int].msg.subnet_mask_fourth }}
          # Set the register 129 to 0x03 to write the changes done.
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x03
          # Set the register 129 to 0x00 to set to read only the registers 155-158
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x00
          - exit
      loop: "{{ range(emsfp_modules_network_configs.results | length)|list }}"
      when: not ansible_check_mode
      no_log: True

    - name: Set default_gateway via the smbus.
      eos_command:
        commands:
          - enable
          - bash
          # Set the page 0x84 dans le registre 127 pour acceder a la MAC et au IP
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 127 0x84
          # Set the register 129 to 0x02 to set to edit the registers 159-162
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x02
          # Set the IP value in register 159-162
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 159 0x{{ emsfp_modules_network_configs.results[item|int].msg.gateway_first }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 160 0x{{ emsfp_modules_network_configs.results[item|int].msg.gateway_second }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 161 0x{{ emsfp_modules_network_configs.results[item|int].msg.gateway_third }}
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 162 0x{{ emsfp_modules_network_configs.results[item|int].msg.gateway_fourth }}
          # Set the register 129 to 0x03 to write the changes done.
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x03
          # Set the register 129 to 0x00 to set to read only the registers 159-162
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 129 0x00
          - exit
      loop: "{{ range(emsfp_modules_network_configs.results | length)|list }}"
      when: not ansible_check_mode
      no_log: True

    - name: delay before reading result
      pause:
        seconds: 5
        prompt: "En attente avant de lire la valeur dans les registre 151 à 154 qui viennent d'être modifiés."

    - name: Read the newtork addresses on the module via the smbus.
      eos_command:
        commands:
          - enable
          - bash
          # Set the page 0x84 dans le registre 127 pour acceder a la MAC et au IP
          - smbus writes /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 127 0x84
          # Read 4 consecutive bytes from the register 151 (151-154) containing IP address.
          - smbus reads /scd/{{ emsfp_modules_network_configs.results[item|int].msg.smbus_address }} 151 12
          - exit
      register: "reads_hex"
      loop: "{{ range(emsfp_modules_network_configs.results | length)|list }}"
      check_mode: no
      no_log: True
      
      #The stdout index is base on the command line used in the eos_command task. In this case, the read in on the line 4 and the index equal 3.
    - name: Convert the network addresses read on ther module from hex to dec.
      convert_network_address:
        ip_addr: "{{ reads_hex.results[item|int].stdout[3][0:11] }}"
        subnet_mask: "{{ reads_hex.results[item|int].stdout[3][12:23] }}"
        gateway: "{{ reads_hex.results[item|int].stdout[3][24:35] }}"
        convert_to: "dec"
      loop: "{{ range(reads_hex.results | length)|list }}"
      register : reads_dec

    - name: Check if the Network Adresses has been changed.
      check_changed_ips:
        read_ip_addr: "{{ reads_dec.results[item|int].msg.converted_value.ip_addr }}"
        expected_ip_addr: "{{ modules[item|int].ip_addr }}"
        read_subnet_mask: "{{ reads_dec.results[item|int].msg.converted_value.subnet_mask }}"
        expected_subnet_mask: "{{ modules[item|int].subnet_mask }}"
        read_gateway: "{{ reads_dec.results[item|int].msg.converted_value.gateway }}"
        expected_gateway: "{{ modules[item|int].gateway }}"
      loop: "{{ range(reads_dec.results | length)|list }}"
      check_mode: no
      register: address_changes
  rescue:
    - debug:
        msg: "{{address_changes}}"
    - include_tasks: snippets/snippet-csv-staging.yml